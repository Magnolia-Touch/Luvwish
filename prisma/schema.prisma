generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum PaymentMethod {
  credit_card
  debit_card
  paypal
  stripe
  bank_transfer
  cash_on_delivery
}

enum CoupounValueType {
  percentage
  amount
}

enum Roles {
  SUPER_ADMIN // full system control
  ADMIN // manage store operations
  STORE_MANAGER // manage products, orders, users (limited)
  PRODUCT_MANAGER // manage product catalog
  ORDER_MANAGER // handle orders, shipping, refunds
  INVENTORY_MANAGER // stock & warehouse management
  CUSTOMER_SUPPORT // handle customer queries & disputes
  MARKETING_MANAGER // manage coupons, campaigns, promotions
  DELIVERY // delivery personnel / logistics
  CUSTOMER // registered buyer
}

model User {
  id        String   @id @default(uuid()) @map("id")
  email     String   @unique @map("email")
  role      Roles    @default(CUSTOMER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  password  String?  @map("password")

  CustomerProfile CustomerProfile?
  AdminProfile    AdminProfile?
  UserOtp         UserOtp[]

  @@map("users")
}

model CustomerProfile {
  id             String  @id @default(uuid())
  name           String  @map("name")
  phone          String? @map("phone")
  address        String
  city           String
  state          String
  postalCode     String
  country        String
  profilePicture String? @map("profile_picture")
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])

  addresses    Address[]
  reviews      Review[]
  couponUsages CouponUsage[]
  orders       Order[]
  cart         CartItem[]
  BankDetails  BankDetails[]
  Wishlist     Wishlist[]
}

model AdminProfile {
  id             String  @id @default(uuid())
  name           String  @map("name")
  phone          String? @map("phone")
  profilePicture String? @map("profile_picture")
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])

  notes String? // any internal notes about the admin
}

model UserOtp {
  id        String   @id @default(uuid())
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Product {
  id              String   @id @default(uuid())
  name            String
  categoryName    String
  discountedPrice Decimal  @db.Decimal(10, 2)
  actualPrice     Decimal  @db.Decimal(10, 2)
  description     String?  @db.Text
  stockCount      Int      @default(0)
  isStock         Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  images     ProductImage[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
  Wishlist   Wishlist[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  url       String
  altText   String?
  isMain    Boolean @default(false)
  sortOrder Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product           Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId String?

  @@unique([customerProfileId, productId])
  @@map("cart_items")
}

model Order {
  id                String        @id @default(uuid())
  orderNumber       String        @unique
  status            OrderStatus   @default(pending)
  paymentStatus     PaymentStatus @default(pending)
  totalAmount       Decimal       @db.Decimal(10, 2)
  shippingCost      Decimal       @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal       @default(0) @db.Decimal(10, 2)
  notes             String?
  shippingAddressId String?
  trackingID        String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  items             OrderItem[]
  shippingAddress   Address?         @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId String?
  Payment           Payment[]

  @@map("orders")
}

model OrderItem {
  id              String  @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  discountedPrice Decimal @db.Decimal(10, 2)
  actualPrice     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(uuid())
  orderId         String
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(pending)
  transactionId   String?
  gatewayResponse Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Address {
  id                String   @id @default(uuid())
  customerProfileId String?
  name              String
  address           String
  city              String
  state             String
  postalCode        String
  country           String
  phone             String?
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  shippingOrders  Order[]          @relation("ShippingAddress")
  CustomerProfile CustomerProfile? @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model BankDetails {
  id                String           @id @default(uuid())
  customerProfileId String?
  accountNumber     String
  accountHolderName String
  ifscCode          String
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)
}

model Review {
  id                String           @id @default(uuid())
  customerProfileId String?
  productId         String
  rating            Int // 1-5 stars
  comment           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  product           Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])

  @@unique([customerProfileId, productId])
  @@map("reviews")
}

model Coupon {
  id                  String           @id @default(uuid())
  couponName          String           @unique
  ValueType           CoupounValueType @default(amount)
  Value               String
  minimumSpent        Decimal          @default(0) @db.Decimal(10, 2)
  usedByCount         Int              @default(1)
  usageLimitPerPerson Int              @default(1)
  validFrom           String
  ValidTill           String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  usages              CouponUsage[]
}

model CouponUsage {
  id                String   @id @default(uuid())
  couponId          String
  customerProfileId String?
  usedAt            DateTime @default(now())

  coupon          Coupon           @relation(fields: [couponId], references: [id])
  CustomerProfile CustomerProfile? @relation(fields: [customerProfileId], references: [id])
}

model Wishlist {
  id                String   @id @default(uuid())
  customerProfileId String
  productId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  customerProfile CustomerProfile @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)

  @@unique([customerProfileId, productId]) // Prevent duplicates
  @@map("wishlist")
}
