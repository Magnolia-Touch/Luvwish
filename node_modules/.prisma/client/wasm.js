
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  password: 'password'
};

exports.Prisma.CustomerProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  profilePicture: 'profilePicture',
  userId: 'userId'
};

exports.Prisma.AdminProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  profilePicture: 'profilePicture',
  userId: 'userId',
  notes: 'notes'
};

exports.Prisma.UserOtpScalarFieldEnum = {
  id: 'id',
  otp: 'otp',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  categoryName: 'categoryName',
  discountedPrice: 'discountedPrice',
  actualPrice: 'actualPrice',
  description: 'description',
  stockCount: 'stockCount',
  isStock: 'isStock',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  altText: 'altText',
  isMain: 'isMain',
  sortOrder: 'sortOrder'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerProfileId: 'customerProfileId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  status: 'status',
  paymentStatus: 'paymentStatus',
  totalAmount: 'totalAmount',
  shippingCost: 'shippingCost',
  taxAmount: 'taxAmount',
  discountAmount: 'discountAmount',
  notes: 'notes',
  shippingAddressId: 'shippingAddressId',
  trackingID: 'trackingID',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerProfileId: 'customerProfileId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  discountedPrice: 'discountedPrice',
  actualPrice: 'actualPrice'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  amount: 'amount',
  method: 'method',
  status: 'status',
  transactionId: 'transactionId',
  gatewayResponse: 'gatewayResponse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  phone: 'phone',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankDetailsScalarFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  accountNumber: 'accountNumber',
  accountHolderName: 'accountHolderName',
  ifscCode: 'ifscCode'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  productId: 'productId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  couponName: 'couponName',
  ValueType: 'ValueType',
  Value: 'Value',
  minimumSpent: 'minimumSpent',
  usedByCount: 'usedByCount',
  usageLimitPerPerson: 'usageLimitPerPerson',
  validFrom: 'validFrom',
  ValidTill: 'ValidTill',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponUsageScalarFieldEnum = {
  id: 'id',
  couponId: 'couponId',
  customerProfileId: 'customerProfileId',
  usedAt: 'usedAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password'
};

exports.Prisma.CustomerProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  profilePicture: 'profilePicture',
  userId: 'userId'
};

exports.Prisma.AdminProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  profilePicture: 'profilePicture',
  userId: 'userId',
  notes: 'notes'
};

exports.Prisma.UserOtpOrderByRelevanceFieldEnum = {
  id: 'id',
  otp: 'otp',
  userId: 'userId'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  categoryName: 'categoryName',
  description: 'description'
};

exports.Prisma.ProductImageOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  altText: 'altText'
};

exports.Prisma.CartItemOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  customerProfileId: 'customerProfileId'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  notes: 'notes',
  shippingAddressId: 'shippingAddressId',
  trackingID: 'trackingID',
  customerProfileId: 'customerProfileId'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  transactionId: 'transactionId'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  phone: 'phone'
};

exports.Prisma.BankDetailsOrderByRelevanceFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  accountNumber: 'accountNumber',
  accountHolderName: 'accountHolderName',
  ifscCode: 'ifscCode'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  productId: 'productId',
  comment: 'comment'
};

exports.Prisma.CouponOrderByRelevanceFieldEnum = {
  id: 'id',
  couponName: 'couponName',
  Value: 'Value',
  validFrom: 'validFrom',
  ValidTill: 'ValidTill'
};

exports.Prisma.CouponUsageOrderByRelevanceFieldEnum = {
  id: 'id',
  couponId: 'couponId',
  customerProfileId: 'customerProfileId'
};

exports.Prisma.WishlistOrderByRelevanceFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  productId: 'productId'
};
exports.Roles = exports.$Enums.Roles = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  STORE_MANAGER: 'STORE_MANAGER',
  PRODUCT_MANAGER: 'PRODUCT_MANAGER',
  ORDER_MANAGER: 'ORDER_MANAGER',
  INVENTORY_MANAGER: 'INVENTORY_MANAGER',
  CUSTOMER_SUPPORT: 'CUSTOMER_SUPPORT',
  MARKETING_MANAGER: 'MARKETING_MANAGER',
  DELIVERY: 'DELIVERY',
  CUSTOMER: 'CUSTOMER'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  cancelled: 'cancelled',
  refunded: 'refunded'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  credit_card: 'credit_card',
  debit_card: 'debit_card',
  paypal: 'paypal',
  stripe: 'stripe',
  bank_transfer: 'bank_transfer',
  cash_on_delivery: 'cash_on_delivery'
};

exports.CoupounValueType = exports.$Enums.CoupounValueType = {
  percentage: 'percentage',
  amount: 'amount'
};

exports.Prisma.ModelName = {
  User: 'User',
  CustomerProfile: 'CustomerProfile',
  AdminProfile: 'AdminProfile',
  UserOtp: 'UserOtp',
  Product: 'Product',
  ProductImage: 'ProductImage',
  CartItem: 'CartItem',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Payment: 'Payment',
  Address: 'Address',
  BankDetails: 'BankDetails',
  Review: 'Review',
  Coupon: 'Coupon',
  CouponUsage: 'CouponUsage',
  Wishlist: 'Wishlist'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
